plugins {
	id 'java'
	id 'eclipse'
	id 'maven'
	id 'maven-publish'
	id 'net.saliman.cobertura' version '2.2.6'
	id 'co.riiid.gradle' version '0.3.1'
	id 'com.jfrog.bintray' version '1.4'
	id 'synapticloop.documentr' version '1.2.1'
}


group = 'synapticloop'
archivesBaseName = 'templar'
description = """Templar templating engine"""
version = '1.2.1'

sourceCompatibility = 1.7
targetCompatibility = 1.7

cobertura {
	coverageFormats = [ 'html', 'xml']
}

test {
	include '**/*Test.class' 
	maxParallelForks = 1
	forkEvery = 50 
}

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

dependencies {
	testRuntime 'junit:junit:4.11'
	testRuntime 'org.mockito:mockito-all:1.10.19'

	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-all:1.10.19'
}

// we always want to fail on version conflict
configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
	}
}

github {
	owner = group
	repo = archivesBaseName
	if(System.getenv('GITHUB_TOKEN')) {
		token = System.getenv('GITHUB_TOKEN')
	}
	tagName = version
	name = version
	assets = [
		'build/libs/' + archivesBaseName + '-' + version + '-all.jar'
	]
}

def javaApiUrl = 'http://docs.oracle.com/javase/1.6.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
    options.links(javaApiUrl, groovyApiUrl)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

publishing {
	publications {
		Synapticloop(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			groupId group
			artifactId archivesBaseName

			pom.withXml {
				configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
					asNode().dependencies[0].dependency.find {
						it.artifactId[0].text() == dep.moduleName &&
								it.groupId[0].text() == dep.moduleGroup
					}.scope[0].value = 'compile'
				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_PASSWORD')

	publications = [ 'Synapticloop' ]

	publish = true

	pkg {
		repo = 'maven'
		name = archivesBaseName
	}

}

task(dist).dependsOn( [ 'test', 'cobertura'] )
